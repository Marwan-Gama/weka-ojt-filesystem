#!/usr/bin/env python3
"""
MySQL Setup Script
Set up MySQL database and switch application back to MySQL
"""

import mysql.connector
import os
import shutil
from dotenv import load_dotenv

# Load environment variables if .env exists
load_dotenv()

def create_env_file(password):
    """Create .env file with database configuration"""
    env_content = f"""# MySQL Database Configuration
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD={password}
DB_NAME=filesystem

# Application Configuration
APP_HOST=0.0.0.0
APP_PORT=8000
SECRET_KEY=your-secret-key-here-change-in-production
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Created .env file with password: {'(empty)' if password == '' else password}")

def test_mysql_connection():
    """Test MySQL connection with user-provided password"""
    print("üîê Please enter your MySQL root password:")
    password = input("Password: ")
    
    try:
        connection = mysql.connector.connect(
            host='localhost',
            user='root',
            password=password,
            port='3306'
        )
        if connection.is_connected():
            print(f"‚úÖ Connected to MySQL successfully!")
            return connection, password
    except mysql.connector.Error as error:
        print(f"‚ùå Failed to connect: {error}")
    
    return None, None

def create_mysql_database(connection):
    """Create the filesystem database and tables"""
    try:
        cursor = connection.cursor()
        
        # Create database
        cursor.execute("CREATE DATABASE IF NOT EXISTS filesystem")
        print("‚úÖ Database 'filesystem' created")
        
        # Use the database
        cursor.execute("USE filesystem")
        
        # Create users table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Users table created")
        
        # Create folders table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS folders (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                user_id INT NOT NULL,
                parent_folder INT NULL,
                is_deleted BOOLEAN DEFAULT FALSE,
                path VARCHAR(500) NOT NULL,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (parent_folder) REFERENCES folders(id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ Folders table created")
        
        # Create files table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS files (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                user_id INT NOT NULL,
                folder_id INT NULL,
                size BIGINT NOT NULL,
                is_deleted BOOLEAN DEFAULT FALSE,
                path VARCHAR(500) NOT NULL,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                group_version_id VARCHAR(255) NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (folder_id) REFERENCES folders(id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ Files table created")
        
        # Create shared files table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shared_files (
                id INT AUTO_INCREMENT PRIMARY KEY,
                email VARCHAR(255) NOT NULL,
                file_id INT NOT NULL,
                shared_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (file_id) REFERENCES files(id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ Shared files table created")
        
        connection.commit()
        print("üéâ MySQL database setup completed!")
        return True
        
    except mysql.connector.Error as error:
        print(f"‚ùå Error creating database: {error}")
        return False

def update_mysql_details(password):
    """Update mysql_details.py with the working password"""
    try:
        with open('server/mysql_details.py', 'w') as f:
            f.write(f"""# MySQL Database Configuration
# Auto-generated by setup script

user = "root"
password = "{password}"
""")
        print(f"‚úÖ Updated server/mysql_details.py with password: {'(empty)' if password == '' else password}")
        return True
    except Exception as e:
        print(f"‚ùå Error updating mysql_details.py: {e}")
        return False

def restore_mysql_files():
    """Restore original MySQL files"""
    try:
        # Restore authentication.py
        if os.path.exists('server/dal/authentication.py.backup'):
            shutil.copy2('server/dal/authentication.py.backup', 'server/dal/authentication.py')
            print("‚úÖ Restored server/dal/authentication.py")
        
        # Restore mysql_connection.py
        if os.path.exists('server/dal/mysql_connection.py.backup'):
            shutil.copy2('server/dal/mysql_connection.py.backup', 'server/dal/mysql_connection.py')
            print("‚úÖ Restored server/dal/mysql_connection.py")
        
        # Update main.py to use MySQL authentication
        main_py_path = 'server/main.py'
        if os.path.exists(main_py_path):
            with open(main_py_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Replace SQLite import with MySQL import
            content = content.replace(
                'from dal.sqlite_authentication import check_email_exist,add_user,get_user_details,decrypt',
                'from dal.authentication import check_email_exist,add_user,get_user_details,decrypt'
            )
            
            with open(main_py_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ Updated server/main.py to use MySQL")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error restoring files: {e}")
        return False

def main():
    print("üîß Setting up MySQL for Weka File Storage System")
    print("=" * 60)
    
    # Test MySQL connection
    connection, password = test_mysql_connection()
    
    if not connection:
        print("\n‚ùå Could not connect to MySQL!")
        print("Please try one of these options:")
        print("1. Reset MySQL password using MySQL Installer")
        print("2. Use MySQL Workbench to reset password")
        print("3. Reinstall MySQL")
        return
    
    # Create database and tables
    if create_mysql_database(connection):
        # Update mysql_details.py
        if update_mysql_details(password):
            # Create .env file
            create_env_file(password)
            # Restore MySQL files
            if restore_mysql_files():
                print("\nüéâ MySQL setup completed successfully!")
                print("\nüéØ Next steps:")
                print("1. Start the backend server: cd server && python main.py")
                print("2. Test the API: curl http://localhost:8000")
                print("3. Access the frontend: http://localhost:5173")
                print("\nüí° MySQL is now configured and ready!")
            else:
                print("‚ùå Failed to restore MySQL files")
        else:
            print("‚ùå Failed to update mysql_details.py")
    else:
        print("‚ùå Failed to create database")
    
    if connection:
        connection.close()

if __name__ == "__main__":
    main() 